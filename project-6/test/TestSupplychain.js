const truffleAssert = require('truffle-assertions');
const assert = require('assert');
const ganache = require('ganache-cli');
const Web3 = require('web3');
const web3 = new Web3(ganache.provider());

// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFisherID = accounts[1]
    const originFisherName = "John Doe"
    const originFisherInformation = "Yarray Valley"
    const originFisherLatitude = "-38.239770"
    const originFisherLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Fisher: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function fishItem() that allows a fisher to fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addFisher(originFisherID);

        // Mark an item as Fished by calling function fishItem()
        result = await supplyChain.fishItem(upc, originFisherID, originFisherName, originFisherInformation, originFisherLatitude, originFisherLongitude, productNotes, { from: originFisherID });
        eventEmitted = truffleAssert.eventEmitted(result, 'Fished');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFisherID, 'Error: Missing or Invalid originFisherID')
        assert.equal(resultBufferOne[4], originFisherName, 'Error: Missing or Invalid originFisherName')
        assert.equal(resultBufferOne[5], originFisherInformation, 'Error: Missing or Invalid originFisherInformation')
        assert.equal(resultBufferOne[6], originFisherLatitude, 'Error: Missing or Invalid originFisherLatitude')
        assert.equal(resultBufferOne[7], originFisherLongitude, 'Error: Missing or Invalid originFisherLongitude')
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid product ID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a fisher to process fish", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Processed by calling function processtItem()
        result = await supplyChain.processItem(upc, { from: originFisherID }); 
        eventEmitted = truffleAssert.eventEmitted(result, 'Processed');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 
        
        // Verify the result set
        assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a fisher to pack fish", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as Packed by calling function packItem()
        result = await supplyChain.packItem(upc, { from: originFisherID });
        eventEmitted = truffleAssert.eventEmitted(result, 'Packed'); 

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a fisher to sell fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as ForSale by calling function sellItem()
        result = await supplyChain.sellItem(upc, productPrice, { from: originFisherID });
        eventEmitted = truffleAssert.eventEmitted(result, 'ForSale');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid product price')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addDistributor(distributorID);

        // Mark an item as Sold by calling function buyItem()
        result = await supplyChain.buyItem(upc, { from: distributorID, value: productPrice });        
        eventEmitted = truffleAssert.eventEmitted(result, 'Sold');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Sold by calling function buyItem()
        result = await supplyChain.shipItem(upc, { from: distributorID });
        eventEmitted = truffleAssert.eventEmitted(result, 'Shipped');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark fish received", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addRetailer(retailerID);

        // Mark an item as Sold by calling function buyItem()
        result = await supplyChain.receiveItem(upc, { from: retailerID });        
        eventEmitted = truffleAssert.eventEmitted(result, 'Received');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase fish", async() => {
        const supplyChain = await SupplyChain.deployed()
        await supplyChain.addConsumer(consumerID);

        // Mark an item as Sold by calling function buyItem()
        result = await supplyChain.purchaseItem(upc, { from: consumerID });
        eventEmitted = truffleAssert.eventEmitted(result, 'Purchased');

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc) 

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        result = await supplyChain.fishItem(upc, originFisherID, originFisherName, originFisherInformation, originFisherLatitude, originFisherLongitude, productNotes, { from: originFisherID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc, {from: accounts[5]})
        
        // Verify the result set:
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFisherID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFisherID, 'Error: Missing or Invalid originFisherID')
        assert.equal(resultBufferOne[4], originFisherName, 'Error: Missing or Invalid originFisherName')
        assert.equal(resultBufferOne[5], originFisherInformation, 'Error: Missing or Invalid originFisherInformation')
        assert.equal(resultBufferOne[6], originFisherLatitude, 'Error: Missing or Invalid originFisherLatitude')
        assert.equal(resultBufferOne[7], originFisherLongitude, 'Error: Missing or Invalid originFisherLongitude') 
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        result = await supplyChain.fishItem(upc, originFisherID, originFisherName, originFisherInformation, originFisherLatitude, originFisherLongitude, productNotes, { from: originFisherID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc, {from: accounts[6]}) 
        
        // Verify the result set:
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid product notes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid product notes');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State' );
    })

});

